Tail recursion:
Call to the function is the last statement in the function.
Hence, all the operations are bring done at the calling time.
Nothing is being done at the returning time.

If something has to be performed at returning time, then it can not be a tail recursion 
Example:
void  func(int n)
{
  if (n > 0) {
    printf("\n%d", n);
    func(n-1);
  }
}

func(3);

If tail recursion, it is better to write loop becuse loop is more efficient in terms of space.

In recursion, in above example, 4 activation records will be created and for loop only one activation record will be created. 
Hence, space complexity dor recursion = O(n) and for loop it is O(1)

But some compilers are intelligent enough to convert it into loop.
